"use strict";var __defProp=Object.defineProperty,__name=(target,value)=>__defProp(target,"name",{value,configurable:!0});exports.id=8810,exports.ids=[8810],exports.modules={8810:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{scopeCss:()=>scopeCss});const safeSelector=__name(selector=>{const placeholders=[];let content,index=0;return content=(selector=selector.replace(/(\[[^\]]*\])/g,(_,keep)=>{const replaceBy=`__ph-${index}__`;return placeholders.push(keep),index++,replaceBy})).replace(/(:nth-[-\w]+)(\([^)]+\))/g,(_,pseudo,exp)=>{const replaceBy=`__ph-${index}__`;return placeholders.push(exp),index++,pseudo+replaceBy}),{content,placeholders}},"safeSelector"),restoreSafeSelector=__name((placeholders,content)=>content.replace(/__ph-(\d+)__/g,(_,index)=>placeholders[+index]),"restoreSafeSelector"),_parenSuffix=")(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))?([^,{]*)",_cssColonHostRe=new RegExp("(-shadowcsshost"+_parenSuffix,"gim"),_cssColonHostContextRe=new RegExp("(-shadowcsscontext"+_parenSuffix,"gim"),_cssColonSlottedRe=new RegExp("(-shadowcssslotted"+_parenSuffix,"gim"),_polyfillHostNoCombinatorRe=/-shadowcsshost-no-combinator([^\s]*)/,_shadowDOMSelectorsRe=[/::shadow/g,/::content/g],_polyfillHostRe=/-shadowcsshost/gim,_colonHostRe=/:host/gim,_colonSlottedRe=/::slotted/gim,_colonHostContextRe=/:host-context/gim,_commentRe=/\/\*\s*[\s\S]*?\*\//g,stripComments=__name(input=>input.replace(_commentRe,""),"stripComments"),_commentWithHashRe=/\/\*\s*#\s*source(Mapping)?URL=[\s\S]+?\*\//g,extractCommentsWithHash=__name(input=>input.match(_commentWithHashRe)||[],"extractCommentsWithHash"),_ruleRe=/(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g,_curlyRe=/([{}])/g,processRules=__name((input,ruleCallback)=>{const inputWithEscapedBlocks=escapeBlocks(input);let nextBlockIndex=0;return inputWithEscapedBlocks.escapedString.replace(_ruleRe,(...m)=>{const selector=m[2];let content="",suffix=m[4],contentPrefix="";suffix&&suffix.startsWith("{%BLOCK%")&&(content=inputWithEscapedBlocks.blocks[nextBlockIndex++],suffix=suffix.substring("%BLOCK%".length+1),contentPrefix="{");const rule=ruleCallback({selector,content});return`${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`})},"processRules"),escapeBlocks=__name(input=>{const inputParts=input.split(_curlyRe),resultParts=[],escapedBlocks=[];let bracketCount=0,currentBlockParts=[];for(let partIndex=0;partIndex<inputParts.length;partIndex++){const part=inputParts[partIndex];"}"===part&&bracketCount--,bracketCount>0?currentBlockParts.push(part):(currentBlockParts.length>0&&(escapedBlocks.push(currentBlockParts.join("")),resultParts.push("%BLOCK%"),currentBlockParts=[]),resultParts.push(part)),"{"===part&&bracketCount++}return currentBlockParts.length>0&&(escapedBlocks.push(currentBlockParts.join("")),resultParts.push("%BLOCK%")),{escapedString:resultParts.join(""),blocks:escapedBlocks}},"escapeBlocks"),insertPolyfillHostInCssText=__name(selector=>selector=selector.replace(_colonHostContextRe,"-shadowcsscontext").replace(_colonHostRe,"-shadowcsshost").replace(_colonSlottedRe,"-shadowcssslotted"),"insertPolyfillHostInCssText"),convertColonRule=__name((cssText,regExp,partReplacer)=>cssText.replace(regExp,(...m)=>{if(m[2]){const parts=m[2].split(","),r=[];for(let i=0;i<parts.length;i++){const p=parts[i].trim();if(!p)break;r.push(partReplacer("-shadowcsshost-no-combinator",p,m[3]))}return r.join(",")}return"-shadowcsshost-no-combinator"+m[3]}),"convertColonRule"),colonHostPartReplacer=__name((host,part,suffix)=>host+part.replace("-shadowcsshost","")+suffix,"colonHostPartReplacer"),convertColonHost=__name(cssText=>convertColonRule(cssText,_cssColonHostRe,colonHostPartReplacer),"convertColonHost"),colonHostContextPartReplacer=__name((host,part,suffix)=>part.indexOf("-shadowcsshost")>-1?colonHostPartReplacer(host,part,suffix):host+part+suffix+", "+part+" "+host+suffix,"colonHostContextPartReplacer"),convertColonSlotted=__name((cssText,slotScopeId)=>{const slotClass="."+slotScopeId+" > ",selectors=[];return cssText=cssText.replace(_cssColonSlottedRe,(...m)=>{if(m[2]){const compound=m[2].trim(),suffix=m[3],slottedSelector=slotClass+compound+suffix;let prefixSelector="";for(let i=m[4]-1;i>=0;i--){const char=m[5][i];if("}"===char||","===char)break;prefixSelector=char+prefixSelector}const orgSelector=prefixSelector+slottedSelector,addedSelector=`${prefixSelector.trimRight()}${slottedSelector.trim()}`;if(orgSelector.trim()!==addedSelector.trim()){const updatedSelector=`${addedSelector}, ${orgSelector}`;selectors.push({orgSelector,updatedSelector})}return slottedSelector}return"-shadowcsshost-no-combinator"+m[3]}),{selectors,cssText}},"convertColonSlotted"),convertColonHostContext=__name(cssText=>convertColonRule(cssText,_cssColonHostContextRe,colonHostContextPartReplacer),"convertColonHostContext"),convertShadowDOMSelectors=__name(cssText=>_shadowDOMSelectorsRe.reduce((result,pattern)=>result.replace(pattern," "),cssText),"convertShadowDOMSelectors"),makeScopeMatcher=__name(scopeSelector2=>(scopeSelector2=scopeSelector2.replace(/\[/g,"\\[").replace(/\]/g,"\\]"),new RegExp("^("+scopeSelector2+")([>\\s~+[.,{:][\\s\\S]*)?$","m")),"makeScopeMatcher"),selectorNeedsScoping=__name((selector,scopeSelector2)=>!makeScopeMatcher(scopeSelector2).test(selector),"selectorNeedsScoping"),applySimpleSelectorScope=__name((selector,scopeSelector2,hostSelector)=>{if(_polyfillHostRe.lastIndex=0,_polyfillHostRe.test(selector)){const replaceBy=`.${hostSelector}`;return selector.replace(_polyfillHostNoCombinatorRe,(_,selector2)=>selector2.replace(/([^:]*)(:*)(.*)/,(_2,before,colon,after)=>before+replaceBy+colon+after)).replace(_polyfillHostRe,replaceBy+" ")}return scopeSelector2+" "+selector},"applySimpleSelectorScope"),applyStrictSelectorScope=__name((selector,scopeSelector2,hostSelector)=>{const className="."+(scopeSelector2=scopeSelector2.replace(/\[is=([^\]]*)\]/g,(_,...parts)=>parts[0])),_scopeSelectorPart=__name(p=>{let scopedP=p.trim();if(!scopedP)return"";if(p.indexOf("-shadowcsshost-no-combinator")>-1)scopedP=applySimpleSelectorScope(p,scopeSelector2,hostSelector);else{const t=p.replace(_polyfillHostRe,"");if(t.length>0){const matches=t.match(/([^:]*)(:*)(.*)/);matches&&(scopedP=matches[1]+className+matches[2]+matches[3])}}return scopedP},"_scopeSelectorPart"),safeContent=safeSelector(selector);let res,scopedSelector="",startIndex=0;const sep=/( |>|\+|~(?!=))\s*/g;let shouldScope=!((selector=safeContent.content).indexOf("-shadowcsshost-no-combinator")>-1);for(;null!==(res=sep.exec(selector));){const separator=res[1],part2=selector.slice(startIndex,res.index).trim();shouldScope=shouldScope||part2.indexOf("-shadowcsshost-no-combinator")>-1,scopedSelector+=`${shouldScope?_scopeSelectorPart(part2):part2} ${separator} `,startIndex=sep.lastIndex}const part=selector.substring(startIndex);return shouldScope=shouldScope||part.indexOf("-shadowcsshost-no-combinator")>-1,scopedSelector+=shouldScope?_scopeSelectorPart(part):part,restoreSafeSelector(safeContent.placeholders,scopedSelector)},"applyStrictSelectorScope"),scopeSelector=__name((selector,scopeSelectorText,hostSelector,slotSelector)=>selector.split(",").map(shallowPart=>slotSelector&&shallowPart.indexOf("."+slotSelector)>-1?shallowPart.trim():selectorNeedsScoping(shallowPart,scopeSelectorText)?applyStrictSelectorScope(shallowPart,scopeSelectorText,hostSelector).trim():shallowPart.trim()).join(", "),"scopeSelector"),scopeSelectors=__name((cssText,scopeSelectorText,hostSelector,slotSelector,commentOriginalSelector)=>processRules(cssText,rule=>{let selector=rule.selector,content=rule.content;return"@"!==rule.selector[0]?selector=scopeSelector(rule.selector,scopeSelectorText,hostSelector,slotSelector):(rule.selector.startsWith("@media")||rule.selector.startsWith("@supports")||rule.selector.startsWith("@page")||rule.selector.startsWith("@document"))&&(content=scopeSelectors(rule.content,scopeSelectorText,hostSelector,slotSelector)),{selector:selector.replace(/\s{2,}/g," ").trim(),content}}),"scopeSelectors"),scopeCssText=__name((cssText,scopeId,hostScopeId,slotScopeId,commentOriginalSelector)=>{cssText=insertPolyfillHostInCssText(cssText),cssText=convertColonHost(cssText),cssText=convertColonHostContext(cssText);const slotted=convertColonSlotted(cssText,slotScopeId);return cssText=slotted.cssText,cssText=convertShadowDOMSelectors(cssText),scopeId&&(cssText=scopeSelectors(cssText,scopeId,hostScopeId,slotScopeId)),{cssText:(cssText=(cssText=cssText.replace(/-shadowcsshost-no-combinator/g,`.${hostScopeId}`)).replace(/>\s*\*\s+([^{, ]+)/gm," $1 ")).trim(),slottedSelectors:slotted.selectors}},"scopeCssText"),scopeCss=__name((cssText,scopeId,commentOriginalSelector)=>{const hostScopeId=scopeId+"-h",slotScopeId=scopeId+"-s",commentsWithHash=extractCommentsWithHash(cssText);cssText=stripComments(cssText);const orgSelectors=[];if(commentOriginalSelector){const processCommentedSelector=__name(rule=>{const placeholder=`/*!@___${orgSelectors.length}___*/`,comment=`/*!@${rule.selector}*/`;return orgSelectors.push({placeholder,comment}),rule.selector=placeholder+rule.selector,rule},"processCommentedSelector");cssText=processRules(cssText,rule=>"@"!==rule.selector[0]?processCommentedSelector(rule):((rule.selector.startsWith("@media")||rule.selector.startsWith("@supports")||rule.selector.startsWith("@page")||rule.selector.startsWith("@document"))&&(rule.content=processRules(rule.content,processCommentedSelector)),rule))}const scoped=scopeCssText(cssText,scopeId,hostScopeId,slotScopeId);return cssText=[scoped.cssText,...commentsWithHash].join("\n"),commentOriginalSelector&&orgSelectors.forEach(({placeholder,comment})=>{cssText=cssText.replace(placeholder,comment)}),scoped.slottedSelectors.forEach(slottedSelector=>{cssText=cssText.replace(slottedSelector.orgSelector,slottedSelector.updatedSelector)}),cssText},"scopeCss")}};